AWSTemplateFormatVersion: '2010-09-09'

Description: 'CI/CD for the static website hosting infrastructure'

Parameters:
  GitHubPersonalAccessToken:
    Description: 'GitHub personal access token'
    Type: String
  GitHubRepo:
    Description: 'GitHub website repository'
    Type: String
  GitHubUser:
    Description: 'GitHub user'
    Type: String
  ProjectName:
    Description: 'Project name'
    Type: String
    Default: example-com
  DomainName:
    Description: 'Domain name'
    Type: String
    Default: example.com
  CertificateArn:
    Description: 'The ARN of the certificate stored in ACM'
    Type: String
  HostedZoneId:
    Description: 'The ID of the hosted zone in Route 53'
    Type: String

Resources:
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub codepipeline-${ProjectName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub codepipeline-${ProjectName}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource:
                - !Sub arn:aws:s3:::${ProjectName}-pipeline-artifacts*
              - Effect: Allow
                Action: s3:putObject
                Resource:
                - !Sub arn:aws:s3:::${DomainName}/*

  Secret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: GitHubPersonalAccessToken
      Description: GitHub personal access token
      SecretString: !Sub '{"OAuthToken":"${GitHubPersonalAccessToken}"}'

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${DomainName}

  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-pipeline-artifacts

  ReadPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
        - Action: s3:GetObject
          Effect: Allow
          Resource: !Sub arn:aws:s3:::${DomainName}/*
          Principal:
            CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref WebsiteBucket

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
        - !Sub ${DomainName}
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          CachedMethods:
          - GET
          - HEAD
          - OPTIONS
          Compress: true
          DefaultTTL: 3600 # in seconds
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          MaxTTL: 86400
          MinTTL: 60
          TargetOriginId: s3origin
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        Origins:
        - DomainName: !GetAtt WebsiteBucket.DomainName
          Id: s3origin
          S3OriginConfig:
            OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only

  DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
      - Name: !Ref DomainName
        Type: A
        AliasTarget:
          # HostedZoneId hard-coded as specified here: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-route53.html#scenario-recordsetgroup-zoneapex
          HostedZoneId: Z2FDTNDATAQYW2
          DNSName: !GetAtt CloudFrontDistribution.DomainName

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn: ArtifactBucket
    Properties:
      Name: !Sub ${ProjectName}-pipeline
      ArtifactStore:
        Type: S3
        Location:
          Ref: ArtifactBucket
      RoleArn: !GetAtt [CodePipelineRole, Arn]
      Stages:
        - Name: Source
          Actions:
            - Name: CheckoutWebsite
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: Website
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: master
                PollForSourceChanges: true
                OAuthToken: '{{resolve:secretsmanager:GitHubPersonalAccessToken:SecretString:OAuthToken}}'
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: UpdateWebsite
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: 1
              InputArtifacts:
                - Name: Website
              Configuration:
                BucketName: !Sub ${DomainName}
                Extract: true
              RunOrder: 1