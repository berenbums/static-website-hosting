---
AWSTemplateFormatVersion: 2010-09-09

Description: |
  CloudFormation template to host a static website on Amazon S3/CloudFront and create a CodePipeline for continuous deployment. The following AWS resources will be created:
  - S3 bucket for storing files
  - CloudFront distribution
  - Route 53 record to access the front end
  - CodePipeline for automatic deployments from a GitHub repository to AWS (including IAM role, GitHub webhook and artifact bucket)
  - Secrets Manager secret to store a GitHub access token.

Parameters:
  GitHubRepo:
    Description: GitHub repository holding the files for the static website
    Type: String
  GitHubUser:
    Description: GitHub user
    Type: String
  GitHubPersonalAccessToken:
    Description: GitHub personal access token
    Type: String
  ProjectName:
    Description: Project name
    Type: String
    Default: example-com
  DomainName:
    Description: Domain name to be created in Route 53
    Type: String
    Default: example.com
  CertificateArn:
    Description: The ARN of the certificate stored in Certificate Manager
    Type: String
  HostedZoneId:
    Description: The ID of the hosted zone in Route 53
    Type: String
  IndexDocument:
    Description: Root object of the website
    Type: String
    Default: index.html
  ErrorDocument:
    Description: Error object of the website
    Type: String
    Default: error.html

Resources:
  GitHubSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${ProjectName}-github-secret
      Description: GitHub personal access token
      SecretString: !Ref GitHubPersonalAccessToken

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-codepipeline
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: s3-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource: !Sub arn:aws:s3:::${CodePipelineBucket}*
              - Effect: Allow
                Action: s3:putObject
                Resource: !Sub arn:aws:s3:::${WebsiteBucket}/*

  CodePipelineBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-codepipeline-artifacts
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls : true
        BlockPublicPolicy : true
        IgnorePublicAcls : true
        RestrictPublicBuckets : true

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DomainName
      BucketEncryption:    
        ServerSideEncryptionConfiguration:    
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: !Ref IndexDocument
        ErrorDocument: !Ref ErrorDocument

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
        - Action: s3:ListBucket
          Effect: Allow
          Resource: !Sub arn:aws:s3:::${DomainName}
          Principal:
            CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
        - Action: s3:GetObject
          Effect: Allow
          Resource: !Sub arn:aws:s3:::${DomainName}/*
          Principal: "*"

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref WebsiteBucket

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
        - !Ref DomainName
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          CachedMethods:
          - GET
          - HEAD
          - OPTIONS
          Compress: true
          DefaultTTL: 3600 # in seconds
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          MaxTTL: 86400
          MinTTL: 60
          TargetOriginId: s3origin
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: !Ref IndexDocument
        CustomErrorResponses:
        - ErrorCode: 404
          ResponseCode: 200
          # ResponsePagePath requires a leading slash as opposed to S3 ErrorDocument
          ResponsePagePath: !Sub /${ErrorDocument}
        Enabled: true
        Origins:
        - DomainName: !GetAtt WebsiteBucket.DomainName
          Id: s3origin
          S3OriginConfig:
            OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only

  Route53Record:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
      - Name: !Ref DomainName
        Type: A
        AliasTarget:
          # HostedZoneId hard-coded as specified here: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-route53.html#scenario-recordsetgroup-zoneapex
          HostedZoneId: Z2FDTNDATAQYW2
          DNSName: !GetAtt CloudFrontDistribution.DomainName

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref ProjectName
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineBucket
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: CheckoutWebsite
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: Website
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: main
                PollForSourceChanges: false
                OAuthToken: !Sub "{{resolve:secretsmanager:${GitHubSecret}:SecretString}}"
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: UpdateWebsite
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: 1
              InputArtifacts:
                - Name: Website
              Configuration:
                BucketName: !Ref DomainName
                Extract: true
              RunOrder: 1

  Webhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Sub "{{resolve:secretsmanager:${GitHubSecret}:SecretString}}"
      Filters:
        - JsonPath: $.ref
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref CodePipeline
      TargetAction: CheckoutWebsite
      Name: !Sub ${ProjectName}-codepipeline-webhook
      TargetPipelineVersion: !GetAtt CodePipeline.Version
      RegisterWithThirdParty: true
